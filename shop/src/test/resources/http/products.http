@host = http://localhost:8080
@product_endpoint = /api/v1/products

### 1. 상품 생성 (UUID 저장 및 검증)
POST {{host}}{{product_endpoint}}
Content-Type: application/json

{
  "name": "강력한 검",
  "price": 10000,
  "stock": 50
}

> {%
    client.test("상품 생성 응답 검증", () => {
        const responseJson = response.body;
        client.global.set("product_uuid", responseJson.id);

        client.assert(response.status === 200, "상품 생성 응답 상태가 200이어야 합니다");
        client.assert(responseJson.name === "강력한 검", "상품명이 일치해야 합니다");
        client.assert(responseJson.price === 10000, "상품 가격이 일치해야 합니다");
        client.assert(responseJson.stock === 50, "상품 재고가 일치해야 합니다");
    });
%}

###

### 2. 상품 조회
GET {{host}}{{product_endpoint}}/{{product_uuid}}

> {%
    client.test("상품 조회 응답 검증", () => {
        const responseJson = response.body;

        client.assert(response.status === 200, "상품 조회 응답 상태가 200이어야 합니다");
        client.assert(responseJson.id === client.global.get("product_uuid"), "UUID가 일치해야 합니다");
        client.assert(responseJson.name === "강력한 검", "상품명이 일치해야 합니다");
        client.assert(responseJson.price === 10000, "상품 가격이 일치해야 합니다");
        client.assert(responseJson.stock === 50, "상품 재고가 일치해야 합니다");
    });
%}

###

### 3. 상품 수정 (UUID 기반 및 검증)
PATCH {{host}}{{product_endpoint}}/{{product_uuid}}
Content-Type: application/json

{
  "name": "전설의 검",
  "price": 15000,
  "stock": 30
}

> {%
    client.test("상품 수정 응답 검증", () => {
        const responseJson = response.body;

        client.assert(response.status === 200, "상품 수정 응답 상태가 200이어야 합니다");
        client.assert(responseJson.name === "전설의 검", "상품명이 수정되어야 합니다");
        client.assert(responseJson.price === 15000, "상품 가격이 수정되어야 합니다");
        client.assert(responseJson.stock === 30, "상품 재고가 수정되어야 합니다");
    });
%}

###

### 4. 추가 상품 생성 (여러 개)
POST {{host}}{{product_endpoint}}
Content-Type: application/json

{
  "name": "신비한 방패",
  "price": 8000,
  "stock": 20
}

###

POST {{host}}{{product_endpoint}}
Content-Type: application/json

{
  "name": "불타는 지팡이",
  "price": 12000,
  "stock": 15
}

###

POST {{host}}{{product_endpoint}}
Content-Type: application/json

{
  "name": "빛나는 갑옷",
  "price": 20000,
  "stock": 5
}

###

### 5. 상품 목록 조회 (개수 검증)
GET {{host}}{{product_endpoint}}

> {%
    client.test("상품 목록 개수 검증", () => {
        const responseJson = response.body;

        client.assert(response.status === 200, "상품 목록 조회 응답 상태가 200이어야 합니다");
        client.assert(responseJson.length >= 4, "상품 개수가 최소 4개 이상이어야 합니다"); // 기존 1개 + 추가 3개
    });
%}

###

### 6. 상품 삭제
DELETE {{host}}{{product_endpoint}}/{{product_uuid}}

> {%
    client.test("상품 삭제 검증", () => {
        client.assert(response.status === 200, "상품 삭제 응답 상태가 200이어야 합니다");
    });
%}

###

### 7. 삭제 후 상품 조회 (404 검증)
GET {{host}}{{product_endpoint}}/{{product_uuid}}

> {%
    client.test("삭제된 상품 조회 검증", () => {
        client.assert(response.status === 404, "삭제된 상품은 404 상태 코드를 반환해야 합니다");
    });
%}
